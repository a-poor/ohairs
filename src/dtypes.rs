use serde::{Deserialize, Serialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct ModelObject {
    /// The model identifier, which can be referenced
    /// in the API endpoints.
    pub id: String,

    /// The object type, which is always "model".
    pub object: String,
    /// The date and time when the model was created.
    pub created: u64,

    /// The organization that owns the model.
    pub owned_by: String,
}

/// Represents a chat completion response returned
/// by model, based on the provided input.
#[derive(Debug, Serialize, Deserialize)]
pub struct ChatCompletionObject {
    /// A unique identifier for the chat completion.
    pub id: String,

    /// The object type, which is always `chat.completion`.
    pub object: String,

    /// A unix timestamp of when the chat completion
    /// was created.
    pub created: u64,

    /// The model used for the chat completion.
    pub model: String,

    /// A list of chat completion choices. Can be more
    /// than one if `n` is greater than `1`.
    pub choices: Vec<ChatCompletionChoice>,

    /// Usage statistics for the completion request.
    pub usage: ChatCompletionUsage,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct ChatCompletionChoice {
    /// The index of the choice in the list of choices.
    pub index: u64,

    /// A chat completion message generated by the model.
    pub message: ChatCompletionMessage,

    /// The reason the model stopped generating tokens.
    ///
    /// This will be `stop` if the model hit a natural stop
    /// point or a provided stop sequence, `length` if the
    /// maximum number of tokens specified in the request
    /// was reached, or `function_call` if the model called
    /// a function.
    pub finish_reason: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct ChatCompletionMessage {
    /// The role of the author of this message.
    pub role: String,

    /// The contents of the message.
    pub content: Option<String>,

    /// The name and arguments of a function that should
    // be called, as generated by the model.
    pub function_call: Option<FunctionCall>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct FunctionCall {
    /// The name of the function to call.
    pub name: String,

    /// The arguments to call the function with, as
    /// generated by the model in JSON format.
    ///
    /// Note that the model does not always generate valid
    /// JSON, and may hallucinate parameters not defined by
    /// your function schema. Validate the arguments in your
    /// code before calling your function.
    pub arguments: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct ChatCompletionUsage {
    /// Number of tokens in the prompt.
    pub prompt_tokens: u64,

    /// Number of tokens in the generated completion.
    pub completion_tokens: u64,

    /// Total number of tokens used in the request
    /// (prompt + completion).
    pub total_tokens: u64,
}

/// Represents a streamed chunk of a chat completion response
/// returned by model, based on the provided input.
#[derive(Debug, Serialize, Deserialize)]
pub struct ChatCompletionChunk {
    pub id: String,
    pub object: String,
    pub created: u64,
    pub model: String,
    pub choices: Vec<ChatCompletionChunkChoice>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct ChatCompletionChunkChoice {
    pub index: u64,
    pub delta: ChatCompletionMessage,
    pub finish_reason: Option<String>,
}
